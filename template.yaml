AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Thalaivargal quotes notify service

Globals:
  Function:
    Runtime: python3.8

Resources:
  ThalaivargalNotifyIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      RoleName: ThalaivargalNotifyIamRole
      Description: Role used for Thalaivargal Notify Lambda function
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
  DailyScheduleNotifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: thalaivargal_notify/
      Handler: notify.notify_schedule_handler
      Role: !GetAtt ThalaivargalNotifyIamRole.Arn
      Events:
        MorningNotifyScheduled:
          Type: Schedule
          Properties:
            Name: QuotesMorningSchedule
            Description: Scheduled for daily morning quote
            Enabled: True
            Input: '{ "topic": "morning","timing" : "morning"}'
#            Schedule: cron(00 03 ? * * *)
            Schedule: 'rate(2 minutes)'
        NoonNotifyScheduled:
          Type: Schedule
          Properties:
            Name: QuotesNoonSchedule
            Description: Scheduled for daily noon quote
            Enabled: True
            Input: '{ "topic": "noon","timing" : "noon"}'
            Schedule: cron(00 07 ? * * *)
        EveningNotifyScheduled:
          Type: Schedule
          Properties:
            Name: QuotesEveningSchedule
            Description: Scheduled for daily evening quote
            Enabled: True
            Input: '{ "topic": "evening","timing" : "evening"}'
            Schedule: cron(00 11 ? * * *)
        EventNotifyScheduled:
          Type: Schedule
          Properties:
            Name: TodayEventSchedule
            Description: Scheduled for current day event
            Enabled: False
            Input: '{ "topic": "general","event" : "today"}'
            Schedule: cron(30 00 ? * * *)
        EventAdvNotifyScheduled:
          Type: Schedule
          Properties:
            Name: TomorrowEventSchedule
            Description: Scheduled for next day event
            Enabled: False
            Input: '{ "topic": "general","event" : "tomorrow"}'
            Schedule: cron(30 12 ? * * *)
  ThalaivargalNotifyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub "/aws/lambda/${DailyScheduleNotifyFunction}"
